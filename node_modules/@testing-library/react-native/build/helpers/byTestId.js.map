{"version":3,"sources":["../../src/helpers/byTestId.ts"],"names":["getNodeByTestId","node","testID","options","exact","normalizer","props","queryAllByTestId","instance","queryAllByTestIdFn","testId","queryOptions","results","findAll","filter","element","type","getMultipleError","String","getMissingError","getBy","getByTestId","getAllBy","getAllByTestId","queryBy","queryByTestId","findBy","findByTestId","findAllBy","findAllByTestId"],"mappings":";;;;;;;AACA;;AACA;;AAIA,MAAMA,eAAe,GAAG,CACtBC,IADsB,EAEtBC,MAFsB,EAGtBC,OAAyB,GAAG,EAHN,KAInB;AACH,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAwBF,OAA9B;AACA,SAAO,sBAAQD,MAAR,EAAgBD,IAAI,CAACK,KAAL,CAAWJ,MAA3B,EAAmCG,UAAnC,EAA+CD,KAA/C,CAAP;AACD,CAPD;;AASA,MAAMG,gBAAgB,GACpBC,QADuB,IAMvB,SAASC,kBAAT,CAA4BC,MAA5B,EAAoCC,YAApC,EAAkD;AAChD,QAAMC,OAAO,GAAGJ,QAAQ,CACrBK,OADa,CACJZ,IAAD,IAAUD,eAAe,CAACC,IAAD,EAAOS,MAAP,EAAeC,YAAf,CADpB,EAEbG,MAFa,CAELC,OAAD,IAAa,OAAOA,OAAO,CAACC,IAAf,KAAwB,QAF/B,CAAhB;AAIA,SAAOJ,OAAP;AACD,CAZH;;;;AAcA,MAAMK,gBAAgB,GAAIP,MAAD,IACtB,wCAAuCQ,MAAM,CAACR,MAAD,CAAS,EADzD;;AAEA,MAAMS,eAAe,GAAIT,MAAD,IACrB,0CAAyCQ,MAAM,CAACR,MAAD,CAAS,EAD3D;;AAGA,MAAM;AACJU,EAAAA,KAAK,EAAEC,WADH;AAEJC,EAAAA,QAAQ,EAAEC,cAFN;AAGJC,EAAAA,OAAO,EAAEC,aAHL;AAIJC,EAAAA,MAAM,EAAEC,YAJJ;AAKJC,EAAAA,SAAS,EAAEC;AALP,IAMkB,8BACtBtB,gBADsB,EAEtBY,eAFsB,EAGtBF,gBAHsB,CANxB","sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { matches, TextMatch } from '../matches';\nimport { makeQueries } from './makeQueries';\nimport type { Queries } from './makeQueries';\nimport type { TextMatchOptions } from './byText';\n\nconst getNodeByTestId = (\n  node: ReactTestInstance,\n  testID: TextMatch,\n  options: TextMatchOptions = {}\n) => {\n  const { exact, normalizer } = options;\n  return matches(testID, node.props.testID, normalizer, exact);\n};\n\nconst queryAllByTestId = (\n  instance: ReactTestInstance\n): ((\n  testId: TextMatch,\n  queryOptions?: TextMatchOptions\n) => Array<ReactTestInstance>) =>\n  function queryAllByTestIdFn(testId, queryOptions) {\n    const results = instance\n      .findAll((node) => getNodeByTestId(node, testId, queryOptions))\n      .filter((element) => typeof element.type === 'string');\n\n    return results;\n  };\n\nconst getMultipleError = (testId: TextMatch) =>\n  `Found multiple elements with testID: ${String(testId)}`;\nconst getMissingError = (testId: TextMatch) =>\n  `Unable to find an element with testID: ${String(testId)}`;\n\nconst {\n  getBy: getByTestId,\n  getAllBy: getAllByTestId,\n  queryBy: queryByTestId,\n  findBy: findByTestId,\n  findAllBy: findAllByTestId,\n}: Queries<TextMatch> = makeQueries(\n  queryAllByTestId,\n  getMissingError,\n  getMultipleError\n);\n\nexport {\n  findAllByTestId,\n  findByTestId,\n  getAllByTestId,\n  getByTestId,\n  queryAllByTestId,\n  queryByTestId,\n};\n"],"file":"byTestId.js"}