import type { ReactTestInstance } from 'react-test-renderer';
import type { WaitForOptions } from '../waitFor';
import type { TextMatch } from '../matches';
import type { TextMatchOptions } from './byText';
export declare type FindByAPI = {
    findAllByDisplayValue: (value: TextMatch, queryOptions?: TextMatchOptions & WaitForOptions, waitForOptions?: WaitForOptions) => Promise<Array<ReactTestInstance>>;
    findAllByPlaceholder: () => void;
    findAllByPlaceholderText: (placeholder: TextMatch, queryOptions?: TextMatchOptions & WaitForOptions, waitForOptions?: WaitForOptions) => Promise<Array<ReactTestInstance>>;
    findAllByTestId: (testId: TextMatch, queryOptions?: TextMatchOptions & WaitForOptions, waitForOptions?: WaitForOptions) => Promise<Array<ReactTestInstance>>;
    findAllByText: (text: TextMatch, queryOptions?: TextMatchOptions & WaitForOptions, waitForOptions?: WaitForOptions) => Promise<Array<ReactTestInstance>>;
    findByDisplayValue: (value: TextMatch, queryOptions?: TextMatchOptions & WaitForOptions, waitForOptions?: WaitForOptions) => Promise<ReactTestInstance>;
    findByPlaceholder: () => void;
    findByPlaceholderText: (placeholder: TextMatch, queryOptions?: TextMatchOptions & WaitForOptions, waitForOptions?: WaitForOptions) => Promise<ReactTestInstance>;
    findByTestId: (testId: TextMatch, queryOptions?: TextMatchOptions & WaitForOptions, waitForOptions?: WaitForOptions) => Promise<ReactTestInstance>;
    findByText: (text: TextMatch, queryOptions?: TextMatchOptions & WaitForOptions, waitForOptions?: WaitForOptions) => Promise<ReactTestInstance>;
};
export declare const findByAPI: (instance: ReactTestInstance) => FindByAPI;
