{"version":3,"sources":["../../src/helpers/makeQueries.ts"],"names":["deprecatedKeys","extractDeprecatedWaitForOptionUsage","queryOptions","waitForOptions","timeout","interval","stackTraceError","forEach","key","option","console","warn","toString","makeQueries","queryAllByQuery","getMissingError","getMultipleError","getAllByQuery","instance","getAllFn","args","results","length","ErrorWithStack","queryByQuery","singleQueryFn","getByQuery","getFn","findAllByQuery","findAllFn","deprecatedWaitForOptions","findByQuery","findFn","getBy","getAllBy","queryBy","findBy","findAllBy"],"mappings":"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","sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport waitFor from '../waitFor';\nimport type { WaitForOptions } from '../waitFor';\nimport { ErrorWithStack } from './errors';\nimport type { TextMatchOptions } from './byText';\n\ntype QueryFunction<ArgType, ReturnType> = (\n  instance: ReactTestInstance\n) => (args: ArgType, queryOptions?: TextMatchOptions) => ReturnType;\n\ntype FindQueryFunction<ArgType, ReturnType> = (\n  instance: ReactTestInstance\n) => (\n  args: ArgType,\n  queryOptions?: TextMatchOptions & WaitForOptions,\n  waitForOptions?: WaitForOptions\n) => Promise<ReturnType>;\n\ntype QueryAllByQuery<QueryArg> = QueryFunction<\n  QueryArg,\n  Array<ReactTestInstance>\n>;\ntype QueryByQuery<QueryArg> = QueryFunction<QueryArg, null | ReactTestInstance>;\n\ntype GetAllByQuery<QueryArg> = QueryFunction<\n  QueryArg,\n  Array<ReactTestInstance>\n>;\ntype GetByQuery<QueryArg> = QueryFunction<QueryArg, ReactTestInstance>;\n\ntype FindAllByQuery<QueryArg> = FindQueryFunction<\n  QueryArg,\n  Array<ReactTestInstance>\n>;\ntype FindByQuery<QueryArg> = FindQueryFunction<QueryArg, ReactTestInstance>;\n\nexport type Queries<QueryArg> = {\n  getBy: GetByQuery<QueryArg>;\n  getAllBy: GetAllByQuery<QueryArg>;\n  queryBy: QueryByQuery<QueryArg>;\n  findBy: FindByQuery<QueryArg>;\n  findAllBy: FindAllByQuery<QueryArg>;\n};\n\n// The WaitForOptions has been moved to the second option param of findBy* methods with the adding of TextMatchOptions\n// To make the migration easier and avoid a breaking change, keep reading this options from the first param but warn\nconst deprecatedKeys: (keyof WaitForOptions)[] = [\n  'timeout',\n  'interval',\n  'stackTraceError',\n];\nconst extractDeprecatedWaitForOptionUsage = (queryOptions?: WaitForOptions) => {\n  if (queryOptions) {\n    const waitForOptions: WaitForOptions = {\n      timeout: queryOptions.timeout,\n      interval: queryOptions.interval,\n      stackTraceError: queryOptions.stackTraceError,\n    };\n    deprecatedKeys.forEach((key) => {\n      const option = queryOptions[key];\n      if (option) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Use of option \"${key}\" in a findBy* query's second parameter, TextMatchOptions, is deprecated. Please pass this option in the third, WaitForOptions, parameter. \nExample: \n\n  findByText(text, {}, { ${key}: ${option.toString()} })`\n        );\n      }\n    });\n    return waitForOptions;\n  }\n};\n\nexport function makeQueries<QueryArg>(\n  queryAllByQuery: QueryAllByQuery<QueryArg>,\n  getMissingError: (args: QueryArg) => string,\n  getMultipleError: (args: QueryArg) => string\n): Queries<QueryArg> {\n  function getAllByQuery(instance: ReactTestInstance) {\n    return function getAllFn(args: QueryArg, queryOptions?: TextMatchOptions) {\n      const results = queryAllByQuery(instance)(args, queryOptions);\n\n      if (results.length === 0) {\n        throw new ErrorWithStack(getMissingError(args), getAllFn);\n      }\n\n      return results;\n    };\n  }\n\n  function queryByQuery(instance: ReactTestInstance) {\n    return function singleQueryFn(\n      args: QueryArg,\n      queryOptions?: TextMatchOptions\n    ) {\n      const results = queryAllByQuery(instance)(args, queryOptions);\n\n      if (results.length > 1) {\n        throw new ErrorWithStack(getMultipleError(args), singleQueryFn);\n      }\n\n      if (results.length === 0) {\n        return null;\n      }\n\n      return results[0];\n    };\n  }\n\n  function getByQuery(instance: ReactTestInstance) {\n    return function getFn(args: QueryArg, queryOptions?: TextMatchOptions) {\n      const results = queryAllByQuery(instance)(args, queryOptions);\n\n      if (results.length > 1) {\n        throw new ErrorWithStack(getMultipleError(args), getFn);\n      }\n\n      if (results.length === 0) {\n        throw new ErrorWithStack(getMissingError(args), getFn);\n      }\n\n      return results[0];\n    };\n  }\n\n  function findAllByQuery(instance: ReactTestInstance) {\n    return function findAllFn(\n      args: QueryArg,\n      queryOptions?: TextMatchOptions & WaitForOptions,\n      waitForOptions: WaitForOptions = {}\n    ) {\n      const deprecatedWaitForOptions = extractDeprecatedWaitForOptionUsage(\n        queryOptions\n      );\n      return waitFor(() => getAllByQuery(instance)(args, queryOptions), {\n        ...deprecatedWaitForOptions,\n        ...waitForOptions,\n      });\n    };\n  }\n\n  function findByQuery(instance: ReactTestInstance) {\n    return function findFn(\n      args: QueryArg,\n      queryOptions?: TextMatchOptions & WaitForOptions,\n      waitForOptions: WaitForOptions = {}\n    ) {\n      const deprecatedWaitForOptions = extractDeprecatedWaitForOptionUsage(\n        queryOptions\n      );\n      return waitFor(() => getByQuery(instance)(args, queryOptions), {\n        ...deprecatedWaitForOptions,\n        ...waitForOptions,\n      });\n    };\n  }\n\n  return {\n    getBy: getByQuery,\n    getAllBy: getAllByQuery,\n    queryBy: queryByQuery,\n    findBy: findByQuery,\n    findAllBy: findAllByQuery,\n  };\n}\n"],"file":"makeQueries.js"}