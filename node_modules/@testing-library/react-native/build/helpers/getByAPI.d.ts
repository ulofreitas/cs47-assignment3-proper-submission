import type { ReactTestInstance } from 'react-test-renderer';
import * as React from 'react';
import type { TextMatch } from '../matches';
import type { TextMatchOptions } from './byText';
export declare type GetByAPI = {
    getByText: (text: TextMatch, queryOptions?: TextMatchOptions) => ReactTestInstance;
    getByPlaceholderText: (placeholder: TextMatch, queryOptions?: TextMatchOptions) => ReactTestInstance;
    getByDisplayValue: (value: TextMatch, queryOptions?: TextMatchOptions) => ReactTestInstance;
    getByTestId: (testID: TextMatch, queryOptions?: TextMatchOptions) => ReactTestInstance;
    getAllByTestId: (testID: TextMatch, queryOptions?: TextMatchOptions) => Array<ReactTestInstance>;
    getAllByText: (text: TextMatch, queryOptions?: TextMatchOptions) => Array<ReactTestInstance>;
    getAllByPlaceholderText: (placeholder: TextMatch, queryOptions?: TextMatchOptions) => Array<ReactTestInstance>;
    getAllByDisplayValue: (value: TextMatch, queryOptions?: TextMatchOptions) => Array<ReactTestInstance>;
    UNSAFE_getByType: <P>(type: React.ComponentType<P>) => ReactTestInstance;
    UNSAFE_getAllByType: <P>(type: React.ComponentType<P>) => Array<ReactTestInstance>;
    UNSAFE_getByProps: (props: {
        [key: string]: any;
    }) => ReactTestInstance;
    UNSAFE_getAllByProps: (props: {
        [key: string]: any;
    }) => Array<ReactTestInstance>;
};
export declare const UNSAFE_getByType: (instance: ReactTestInstance) => (type: React.ComponentType<any>) => ReactTestInstance;
export declare const UNSAFE_getByProps: (instance: ReactTestInstance) => (props: {
    [propName: string]: any;
}) => ReactTestInstance;
export declare const UNSAFE_getAllByType: (instance: ReactTestInstance) => (type: React.ComponentType<any>) => Array<ReactTestInstance>;
export declare const UNSAFE_getAllByProps: (instance: ReactTestInstance) => (props: {
    [propName: string]: any;
}) => Array<ReactTestInstance>;
export declare const getByAPI: (instance: ReactTestInstance) => GetByAPI;
