{"version":3,"sources":["../../src/helpers/getByAPI.ts"],"names":["UNSAFE_getByType","instance","getByTypeFn","type","findByType","error","ErrorWithStack","UNSAFE_getByProps","getByPropsFn","props","findByProps","UNSAFE_getAllByType","getAllByTypeFn","results","findAllByType","length","UNSAFE_getAllByProps","getAllByPropsFn","findAllByProps","getByAPI","getByText","getByPlaceholderText","getByDisplayValue","getByTestId","getAllByText","getAllByPlaceholderText","getAllByDisplayValue","getAllByTestId"],"mappings":";;;;;;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AAIA;;;;AAgDO,MAAMA,gBAAgB,GAC3BC,QAD8B,IAG9B,SAASC,WAAT,CAAqBC,IAArB,EAAqD;AACnD,MAAI;AACF,WAAOF,QAAQ,CAACG,UAAT,CAAoBD,IAApB,CAAP;AACD,GAFD,CAEE,OAAOE,KAAP,EAAc;AACd,UAAM,IAAIC,sBAAJ,CAAmB,iCAAoBD,KAApB,CAAnB,EAA+CH,WAA/C,CAAN;AACD;AACF,CATI;;;;AAWA,MAAMK,iBAAiB,GAC5BN,QAD+B,IAG/B,SAASO,YAAT,CAAsBC,KAAtB,EAA0D;AACxD,MAAI;AACF,WAAOR,QAAQ,CAACS,WAAT,CAAqBD,KAArB,CAAP;AACD,GAFD,CAEE,OAAOJ,KAAP,EAAc;AACd,UAAM,IAAIC,sBAAJ,CAAmB,iCAAoBD,KAApB,CAAnB,EAA+CG,YAA/C,CAAN;AACD;AACF,CATI;;;;AAWA,MAAMG,mBAAmB,GAC9BV,QADiC,IAGjC,SAASW,cAAT,CAAwBT,IAAxB,EAAwD;AACtD,QAAMU,OAAO,GAAGZ,QAAQ,CAACa,aAAT,CAAuBX,IAAvB,CAAhB;;AACA,MAAIU,OAAO,CAACE,MAAR,KAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIT,sBAAJ,CAAmB,oBAAnB,EAAyCM,cAAzC,CAAN;AACD;;AACD,SAAOC,OAAP;AACD,CATI;;;;AAWA,MAAMG,oBAAoB,GAC/Bf,QADkC,IAGlC,SAASgB,eAAT,CAAyBR,KAAzB,EAA6D;AAC3D,QAAMI,OAAO,GAAGZ,QAAQ,CAACiB,cAAT,CAAwBT,KAAxB,CAAhB;;AACA,MAAII,OAAO,CAACE,MAAR,KAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIT,sBAAJ,CACH,mCAAkC,2BAAaG,KAAb,CAAoB,EADnD,EAEJQ,eAFI,CAAN;AAID;;AACD,SAAOJ,OAAP;AACD,CAZI;;;;AAcA,MAAMM,QAAQ,GAAIlB,QAAD,KAA4C;AAClEmB,EAAAA,SAAS,EAAE,uBAAUnB,QAAV,CADuD;AAElEoB,EAAAA,oBAAoB,EAAE,6CAAqBpB,QAArB,CAF4C;AAGlEqB,EAAAA,iBAAiB,EAAE,uCAAkBrB,QAAlB,CAH+C;AAIlEsB,EAAAA,WAAW,EAAE,2BAAYtB,QAAZ,CAJqD;AAKlEuB,EAAAA,YAAY,EAAE,0BAAavB,QAAb,CALoD;AAMlEwB,EAAAA,uBAAuB,EAAE,gDAAwBxB,QAAxB,CANyC;AAOlEyB,EAAAA,oBAAoB,EAAE,0CAAqBzB,QAArB,CAP4C;AAQlE0B,EAAAA,cAAc,EAAE,8BAAe1B,QAAf,CARkD;AAUlE;AACAD,EAAAA,gBAAgB,EAAEA,gBAAgB,CAACC,QAAD,CAXgC;AAYlEU,EAAAA,mBAAmB,EAAEA,mBAAmB,CAACV,QAAD,CAZ0B;AAalEM,EAAAA,iBAAiB,EAAEA,iBAAiB,CAACN,QAAD,CAb8B;AAclEe,EAAAA,oBAAoB,EAAEA,oBAAoB,CAACf,QAAD;AAdwB,CAA5C,CAAjB","sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport * as React from 'react';\nimport prettyFormat from 'pretty-format';\nimport type { TextMatch } from '../matches';\nimport { ErrorWithStack, prepareErrorMessage } from './errors';\nimport { getAllByTestId, getByTestId } from './byTestId';\nimport { getAllByText, getByText } from './byText';\nimport {\n  getAllByPlaceholderText,\n  getByPlaceholderText,\n} from './byPlaceholderText';\nimport { getAllByDisplayValue, getByDisplayValue } from './byDisplayValue';\nimport type { TextMatchOptions } from './byText';\n\nexport type GetByAPI = {\n  getByText: (\n    text: TextMatch,\n    queryOptions?: TextMatchOptions\n  ) => ReactTestInstance;\n  getByPlaceholderText: (\n    placeholder: TextMatch,\n    queryOptions?: TextMatchOptions\n  ) => ReactTestInstance;\n  getByDisplayValue: (\n    value: TextMatch,\n    queryOptions?: TextMatchOptions\n  ) => ReactTestInstance;\n  getByTestId: (\n    testID: TextMatch,\n    queryOptions?: TextMatchOptions\n  ) => ReactTestInstance;\n  getAllByTestId: (\n    testID: TextMatch,\n    queryOptions?: TextMatchOptions\n  ) => Array<ReactTestInstance>;\n  getAllByText: (\n    text: TextMatch,\n    queryOptions?: TextMatchOptions\n  ) => Array<ReactTestInstance>;\n  getAllByPlaceholderText: (\n    placeholder: TextMatch,\n    queryOptions?: TextMatchOptions\n  ) => Array<ReactTestInstance>;\n  getAllByDisplayValue: (\n    value: TextMatch,\n    queryOptions?: TextMatchOptions\n  ) => Array<ReactTestInstance>;\n\n  // Unsafe aliases\n  UNSAFE_getByType: <P>(type: React.ComponentType<P>) => ReactTestInstance;\n  UNSAFE_getAllByType: <P>(\n    type: React.ComponentType<P>\n  ) => Array<ReactTestInstance>;\n  UNSAFE_getByProps: (props: { [key: string]: any }) => ReactTestInstance;\n  UNSAFE_getAllByProps: (props: {\n    [key: string]: any;\n  }) => Array<ReactTestInstance>;\n};\n\nexport const UNSAFE_getByType = (\n  instance: ReactTestInstance\n): ((type: React.ComponentType<any>) => ReactTestInstance) =>\n  function getByTypeFn(type: React.ComponentType<any>) {\n    try {\n      return instance.findByType(type);\n    } catch (error) {\n      throw new ErrorWithStack(prepareErrorMessage(error), getByTypeFn);\n    }\n  };\n\nexport const UNSAFE_getByProps = (\n  instance: ReactTestInstance\n): ((props: { [propName: string]: any }) => ReactTestInstance) =>\n  function getByPropsFn(props: { [propName: string]: any }) {\n    try {\n      return instance.findByProps(props);\n    } catch (error) {\n      throw new ErrorWithStack(prepareErrorMessage(error), getByPropsFn);\n    }\n  };\n\nexport const UNSAFE_getAllByType = (\n  instance: ReactTestInstance\n): ((type: React.ComponentType<any>) => Array<ReactTestInstance>) =>\n  function getAllByTypeFn(type: React.ComponentType<any>) {\n    const results = instance.findAllByType(type);\n    if (results.length === 0) {\n      throw new ErrorWithStack('No instances found', getAllByTypeFn);\n    }\n    return results;\n  };\n\nexport const UNSAFE_getAllByProps = (\n  instance: ReactTestInstance\n): ((props: { [propName: string]: any }) => Array<ReactTestInstance>) =>\n  function getAllByPropsFn(props: { [propName: string]: any }) {\n    const results = instance.findAllByProps(props);\n    if (results.length === 0) {\n      throw new ErrorWithStack(\n        `No instances found with props:\\n${prettyFormat(props)}`,\n        getAllByPropsFn\n      );\n    }\n    return results;\n  };\n\nexport const getByAPI = (instance: ReactTestInstance): GetByAPI => ({\n  getByText: getByText(instance),\n  getByPlaceholderText: getByPlaceholderText(instance),\n  getByDisplayValue: getByDisplayValue(instance),\n  getByTestId: getByTestId(instance),\n  getAllByText: getAllByText(instance),\n  getAllByPlaceholderText: getAllByPlaceholderText(instance),\n  getAllByDisplayValue: getAllByDisplayValue(instance),\n  getAllByTestId: getAllByTestId(instance),\n\n  // Unsafe\n  UNSAFE_getByType: UNSAFE_getByType(instance),\n  UNSAFE_getAllByType: UNSAFE_getAllByType(instance),\n  UNSAFE_getByProps: UNSAFE_getByProps(instance),\n  UNSAFE_getAllByProps: UNSAFE_getAllByProps(instance),\n});\n"],"file":"getByAPI.js"}