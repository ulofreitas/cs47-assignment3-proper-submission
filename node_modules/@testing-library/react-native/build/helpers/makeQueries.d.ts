import type { ReactTestInstance } from 'react-test-renderer';
import type { WaitForOptions } from '../waitFor';
import type { TextMatchOptions } from './byText';
declare type QueryFunction<ArgType, ReturnType> = (instance: ReactTestInstance) => (args: ArgType, queryOptions?: TextMatchOptions) => ReturnType;
declare type FindQueryFunction<ArgType, ReturnType> = (instance: ReactTestInstance) => (args: ArgType, queryOptions?: TextMatchOptions & WaitForOptions, waitForOptions?: WaitForOptions) => Promise<ReturnType>;
declare type QueryAllByQuery<QueryArg> = QueryFunction<QueryArg, Array<ReactTestInstance>>;
declare type QueryByQuery<QueryArg> = QueryFunction<QueryArg, null | ReactTestInstance>;
declare type GetAllByQuery<QueryArg> = QueryFunction<QueryArg, Array<ReactTestInstance>>;
declare type GetByQuery<QueryArg> = QueryFunction<QueryArg, ReactTestInstance>;
declare type FindAllByQuery<QueryArg> = FindQueryFunction<QueryArg, Array<ReactTestInstance>>;
declare type FindByQuery<QueryArg> = FindQueryFunction<QueryArg, ReactTestInstance>;
export declare type Queries<QueryArg> = {
    getBy: GetByQuery<QueryArg>;
    getAllBy: GetAllByQuery<QueryArg>;
    queryBy: QueryByQuery<QueryArg>;
    findBy: FindByQuery<QueryArg>;
    findAllBy: FindAllByQuery<QueryArg>;
};
export declare function makeQueries<QueryArg>(queryAllByQuery: QueryAllByQuery<QueryArg>, getMissingError: (args: QueryArg) => string, getMultipleError: (args: QueryArg) => string): Queries<QueryArg>;
export {};
