{"version":3,"sources":["../../src/helpers/byDisplayValue.ts"],"names":["getTextInputNodeByDisplayValue","node","value","options","TextInput","require","exact","normalizer","nodeValue","props","undefined","defaultValue","error","queryAllByDisplayValue","instance","queryAllByDisplayValueFn","displayValue","queryOptions","findAll","getMultipleError","String","getMissingError","getBy","getByDisplayValue","getAllBy","getAllByDisplayValue","queryBy","queryByDisplayValue","findBy","findByDisplayValue","findAllBy","findAllByDisplayValue"],"mappings":";;;;;;;AACA;;AACA;;AAEA;;AACA;;AAGA,MAAMA,8BAA8B,GAAG,CACrCC,IADqC,EAErCC,KAFqC,EAGrCC,OAAyB,GAAG,EAHS,KAIlC;AACH,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAgBC,OAAO,CAAC,cAAD,CAA7B;;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAwBJ,OAA9B;AACA,UAAMK,SAAS,GACbP,IAAI,CAACQ,KAAL,CAAWP,KAAX,KAAqBQ,SAArB,GACIT,IAAI,CAACQ,KAAL,CAAWP,KADf,GAEID,IAAI,CAACQ,KAAL,CAAWE,YAHjB;AAIA,WACE,wCAAiBV,IAAjB,EAAuBG,SAAvB,KACA,sBAAQF,KAAR,EAAeM,SAAf,EAA0BD,UAA1B,EAAsCD,KAAtC,CAFF;AAID,GAXD,CAWE,OAAOM,KAAP,EAAc;AACd,UAAM,4CAA+BA,KAA/B,CAAN;AACD;AACF,CAnBD;;AAqBA,MAAMC,sBAAsB,GAC1BC,QAD6B,IAM7B,SAASC,wBAAT,CAAkCC,YAAlC,EAAgDC,YAAhD,EAA8D;AAC5D,SAAOH,QAAQ,CAACI,OAAT,CAAkBjB,IAAD,IACtBD,8BAA8B,CAACC,IAAD,EAAOe,YAAP,EAAqBC,YAArB,CADzB,CAAP;AAGD,CAVH;;;;AAYA,MAAME,gBAAgB,GAAIH,YAAD,IACtB,+CAA8CI,MAAM,CAACJ,YAAD,CAAe,GADtE;;AAEA,MAAMK,eAAe,GAAIL,YAAD,IACrB,gDAA+CI,MAAM,CAACJ,YAAD,CAAe,EADvE;;AAGA,MAAM;AACJM,EAAAA,KAAK,EAAEC,iBADH;AAEJC,EAAAA,QAAQ,EAAEC,oBAFN;AAGJC,EAAAA,OAAO,EAAEC,mBAHL;AAIJC,EAAAA,MAAM,EAAEC,kBAJJ;AAKJC,EAAAA,SAAS,EAAEC;AALP,IAMkB,8BACtBlB,sBADsB,EAEtBQ,eAFsB,EAGtBF,gBAHsB,CANxB","sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { matches, TextMatch } from '../matches';\nimport { makeQueries } from './makeQueries';\nimport type { Queries } from './makeQueries';\nimport { filterNodeByType } from './filterNodeByType';\nimport { createLibraryNotSupportedError } from './errors';\nimport type { TextMatchOptions } from './byText';\n\nconst getTextInputNodeByDisplayValue = (\n  node: ReactTestInstance,\n  value: TextMatch,\n  options: TextMatchOptions = {}\n) => {\n  try {\n    const { TextInput } = require('react-native');\n    const { exact, normalizer } = options;\n    const nodeValue =\n      node.props.value !== undefined\n        ? node.props.value\n        : node.props.defaultValue;\n    return (\n      filterNodeByType(node, TextInput) &&\n      matches(value, nodeValue, normalizer, exact)\n    );\n  } catch (error) {\n    throw createLibraryNotSupportedError(error);\n  }\n};\n\nconst queryAllByDisplayValue = (\n  instance: ReactTestInstance\n): ((\n  displayValue: TextMatch,\n  queryOptions?: TextMatchOptions\n) => Array<ReactTestInstance>) =>\n  function queryAllByDisplayValueFn(displayValue, queryOptions) {\n    return instance.findAll((node) =>\n      getTextInputNodeByDisplayValue(node, displayValue, queryOptions)\n    );\n  };\n\nconst getMultipleError = (displayValue: TextMatch) =>\n  `Found multiple elements with display value: ${String(displayValue)} `;\nconst getMissingError = (displayValue: TextMatch) =>\n  `Unable to find an element with displayValue: ${String(displayValue)}`;\n\nconst {\n  getBy: getByDisplayValue,\n  getAllBy: getAllByDisplayValue,\n  queryBy: queryByDisplayValue,\n  findBy: findByDisplayValue,\n  findAllBy: findAllByDisplayValue,\n}: Queries<TextMatch> = makeQueries(\n  queryAllByDisplayValue,\n  getMissingError,\n  getMultipleError\n);\n\nexport {\n  findAllByDisplayValue,\n  findByDisplayValue,\n  getAllByDisplayValue,\n  getByDisplayValue,\n  queryAllByDisplayValue,\n  queryByDisplayValue,\n};\n"],"file":"byDisplayValue.js"}