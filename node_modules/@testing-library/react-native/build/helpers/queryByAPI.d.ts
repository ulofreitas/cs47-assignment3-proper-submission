import type { ReactTestInstance } from 'react-test-renderer';
import * as React from 'react';
import type { TextMatch } from '../matches';
import type { TextMatchOptions } from './byText';
export declare type QueryByAPI = {
    queryByText: (name: TextMatch, queryOptions?: TextMatchOptions) => ReactTestInstance | null;
    queryAllByText: (text: TextMatch, queryOptions?: TextMatchOptions) => Array<ReactTestInstance>;
    queryByPlaceholderText: (placeholder: TextMatch, queryOptions?: TextMatchOptions) => ReactTestInstance | null;
    queryAllByPlaceholderText: (placeholder: TextMatch, queryOptions?: TextMatchOptions) => Array<ReactTestInstance>;
    queryByDisplayValue: (value: TextMatch, queryOptions?: TextMatchOptions) => ReactTestInstance | null;
    queryAllByDisplayValue: (value: TextMatch, queryOptions?: TextMatchOptions) => Array<ReactTestInstance>;
    queryByTestId: (testID: TextMatch) => ReactTestInstance | null;
    queryAllByTestId: (testID: TextMatch) => Array<ReactTestInstance>;
    UNSAFE_queryByType: <P>(type: React.ComponentType<P>) => ReactTestInstance | null;
    UNSAFE_queryAllByType: <P>(type: React.ComponentType<P>) => Array<ReactTestInstance>;
    UNSAFE_queryByProps: (props: {
        [key: string]: any;
    }) => ReactTestInstance | null;
    UNSAFE_queryAllByProps: (props: {
        [key: string]: any;
    }) => Array<ReactTestInstance>;
    queryByName: () => void;
    queryByType: () => void;
    queryByProps: () => void;
    queryAllByName: () => void;
    queryAllByType: () => void;
    queryAllByProps: () => void;
    queryByPlaceholder: () => void;
    queryAllByPlaceholder: () => void;
};
export declare const UNSAFE_queryByType: (instance: ReactTestInstance) => (type: React.ComponentType<any>) => ReactTestInstance | null;
export declare const UNSAFE_queryByProps: (instance: ReactTestInstance) => (props: {
    [propName: string]: any;
}) => ReactTestInstance | null;
export declare const UNSAFE_queryAllByType: (instance: ReactTestInstance) => (type: React.ComponentType<any>) => Array<ReactTestInstance>;
export declare const UNSAFE_queryAllByProps: (instance: ReactTestInstance) => (props: {
    [propName: string]: any;
}) => Array<ReactTestInstance>;
export declare const queryByAPI: (instance: ReactTestInstance) => QueryByAPI;
