import type { ReactTestInstance } from 'react-test-renderer';
import { TextMatch } from '../matches';
import type { TextMatchOptions } from './byText';
declare const queryAllByPlaceholderText: (instance: ReactTestInstance) => (placeholder: TextMatch, queryOptions?: TextMatchOptions | undefined) => Array<ReactTestInstance>;
declare const getByPlaceholderText: (instance: ReactTestInstance) => (args: TextMatch, queryOptions?: TextMatchOptions | undefined) => ReactTestInstance, getAllByPlaceholderText: (instance: ReactTestInstance) => (args: TextMatch, queryOptions?: TextMatchOptions | undefined) => ReactTestInstance[], queryByPlaceholderText: (instance: ReactTestInstance) => (args: TextMatch, queryOptions?: TextMatchOptions | undefined) => ReactTestInstance | null, findByPlaceholderText: (instance: ReactTestInstance) => (args: TextMatch, queryOptions?: (TextMatchOptions & import("../waitFor").WaitForOptions) | undefined, waitForOptions?: import("../waitFor").WaitForOptions | undefined) => Promise<ReactTestInstance>, findAllByPlaceholderText: (instance: ReactTestInstance) => (args: TextMatch, queryOptions?: (TextMatchOptions & import("../waitFor").WaitForOptions) | undefined, waitForOptions?: import("../waitFor").WaitForOptions | undefined) => Promise<ReactTestInstance[]>;
export { findAllByPlaceholderText, findByPlaceholderText, getAllByPlaceholderText, getByPlaceholderText, queryAllByPlaceholderText, queryByPlaceholderText, };
